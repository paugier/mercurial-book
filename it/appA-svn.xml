<appendix id="svn">
  <?dbhtml filename="Migrare-verso-Mercurial.html"?>
<title>Migrare verso Mercurial</title>

  <para id="x_6e1">Un modo comune di tastare il terreno con un nuovo strumento di controllo di revisione è sperimentarlo spostando un progetto esistente, piuttosto che cominciare un nuovo progetto da zero.</para>

  <para id="x_6e2">In questa appendice, parliamo di come importare la cronologia di un progetto in Mercurial e di quello a cui dovete essere preparati se siete abituati a un sistema di controllo di revisione differente.</para>

  <sect1>
    <title>Importare la cronologia da un altro sistema</title>

    <para id="x_6e3">Mercurial include un'estensione chiamata <literal>convert</literal> che può importare la cronologia di un progetto dalla maggior parte dei sistemi di controllo di revisione più popolari. Al momento in cui il libro è stato scritto, l'estensione può importare la cronologia dai seguenti sistemi:</para>
    <itemizedlist>
      <listitem>
	<para id="x_6e4">Subversion</para>
      </listitem>
      <listitem>
	<para id="x_6e5">CVS</para>
      </listitem>
      <listitem>
	<para id="x_6e6">git</para>
      </listitem>
      <listitem>
	<para id="x_6e7">Darcs</para>
      </listitem>
      <listitem>
	<para id="x_6e8">Bazaar</para>
      </listitem>
      <listitem>
	<para id="x_6e9">Monotone</para>
      </listitem>
      <listitem>
	<para id="x_6ea">GNU Arch</para>
      </listitem>
      <listitem>
	<para id="x_6eb">Mercurial</para>
      </listitem>
    </itemizedlist>

    <para id="x_6ec">(Per verificare se lo stesso Mercurial è supportato come sorgente da cui importare la cronologia, si veda la <xref linkend="svn.filemap"/>.)</para>

    <para id="x_6ed">Potete abilitare l'estensione nel solito modo, modificando il vostro file <filename>~/.hgrc</filename>.</para>

    <programlisting>[extensions]
convert =</programlisting>

    <para id="x_6ee">Questo renderà disponibile il comando <command>hg convert</command> Il comando è facile da usare. Per esempio, l'invocazione seguente importerà la cronologia di Subversion per il framework di collaudo di unità Nose in Mercurial.</para>

    <screen><prompt>$</prompt> <userinput>hg convert http://python-nose.googlecode.com/svn/trunk</userinput></screen>

    <para id="x_6ef">L'estensione <literal>convert</literal> opera in maniera incrementale. In altre parole, dopo che avete eseguito <command>hg convert</command> una prima volta, eseguendolo nuovamente importerete qualsiasi nuova revisione inserita dopo che avete dato il via alla prima esecuzione. La conversione incrementale funzionerà solo se eseguite <command>hg convert</command> nello stesso repository Mercurial che avete usato in origine, perché l'estensione <literal>convert</literal> salva alcuni metadati privati in un file esterno al controllo di revisione chiamato <filename>.hg/shamap</filename> all'interno del repository.</para>

    <para id="x_707">Quando volete cominciare a fare modifiche usando Mercurial, la cosa migliore è clonare l'alberto in cui state facendo le vostre conversioni e lasciare l'albero originale per conversioni incrementali future. Questo è il modo più sicuro di permettervi di estrarre e unire i futuri inserimenti dal sistema di controllo di revisione sorgente nel vostro progetto Mercurial appena attivato.</para>

    <sect2>
      <title>Convertire rami molteplici</title>

      <para id="x_708">Il comando <command>hg convert</command> eseguito in precedenza converte solo la cronologia del <literal>trunk</literal> del repository Subversion. Se invece usiamo l'URL <literal>http://python-nose.googlecode.com/svn</literal>, Mercurial scoprirà automaticamente le directory <literal>trunk</literal>, <literal>tags</literal> e <literal>branches</literal> che compongono il layout usato di solito dai progetti Subversion e le importerà in Mercurial come rami separati.</para>

      <para id="x_709">Di default, a ogni ramo Subversion importato in Mercurial viene assegnato un nome di ramo. Dopo che la conversione si è conclusa, potete ottenere una lista dei nomi dei rami attivi nel repository Mercurial usando <command>hg branches -a</command>. Se preferite importare i rami Subversion senza nomi, passate l'opzione <option>--config convert.hg.usebranchnames=false</option> al comando <command>hg convert</command>.</para>

      <para id="x_70a">Una volta che avete convertito il vostro albero, se volete seguire la classica procedura Mercurial di lavorare in un albero che contiene un singolo ramo, potete clonare quel singolo ramo usando <command>hg clone -r mybranchname</command>.</para>
    </sect2>

    <sect2>
      <title>Correlare i nomi utente</title>

      <para id="x_6f0">Alcuni strumenti di controllo di revisione salvano solo nomi utenti brevi con ogni inserimento e questi possono essere difficili da interpretare. La norma con Mercurial è quella di salvare il nome e l'indirizzo email di chi effettua il commit, che è molto più utile per parlare con loro dopo il fatto.</para>

      <para id="x_6f1">Se state convertendo un albero da un sistema di controllo di revisione che usa nomi brevi, potete correlare quei nomi a equivalenti più lunghi passando l'opzione <option>--authors</option> a <command>hg convert</command>. Questa opzione accetta un nome di file che dovrebbe contenere voci della forma seguente.</para>

      <programlisting>arist = Aristotle &lt;aristotle@phil.example.gr&gt;
soc = Socrates &lt;socrates@phil.example.gr&gt;</programlisting>

      <para id="x_6f2">Ogni volta che <literal>convert</literal> incontra un commit associato al nome utente <literal>arist</literal> nel repository sorgente, userà il nome <literal>Aristotle &lt;aristotle@phil.example.gr&gt;</literal> nella revisione convertita in Mercurial. Se nessuna corrispondenza viene trovata per un dato nome, quel nome è usato alla lettera.</para>
    </sect2>

    <sect2 id="svn.filemap">
      <title>Rassettare l'albero</title>

      <para id="x_6f3">Non tutti i progetti hanno una cronologia pristina. Potrebbe esserci una directory che non avrebbe mai dovuto essere inserita, un file che è troppo grande, o un'intera gerarchia che ha bisogno di essere riorganizzata.</para>

      <para id="x_6f4">L'estensione <literal>convert</literal> supporta l'idea di una <quote>mappa di file</quote> che può riorganizzare i file e le directory in un progetto nel momento in cui ne importa la cronologia. Questo è utile non solo quando si importa la cronologia da altri sistemi di controllo di revisione, ma anche per potare o riorganizzare un albero di Mercurial.</para>

      <para id="x_6f5">Per specificare una mappa di file, usate l'opzione <option>--filemap</option> e fornitele un nome di file. Una mappa di file contiene righe nei seguenti formati.</para>

      <programlisting># Questo è un commento
# Le righe vuote vengono ignorate

include path/to/file

exclude path/to/file

rename from/some/path to/some/other/place
</programlisting>

      <para id="x_6f6">La direttiva <literal>include</literal> provoca l'inclusione di un file, o di tutti i file contenuti in una directory, nel repository destinazione. Questa direttiva provoca anche l'esclusione di tutti gli altri file o directory che non sono stati esplicitamente inclusi. La direttiva <literal>exclude</literal> provoca l'omissione di file e directory indicati e di tutti quegli altri che non sono stati esplicitamente menzionati per essere inclusi.</para>

      <para id="x_6f7">Per spostare un file o una directory da una posizione a un'altra, usate la direttiva <literal>rename</literal>. Se dovete spostare un file o una directory da una sottodirectory alla radice del repository, usate <literal>.</literal> come secondo argomento della direttiva <literal>rename</literal>.</para>
    </sect2>

    <sect2>
      <title>Migliorare le prestazioni della conversione da Subversion</title>

      <para id="x_70b">Avrete spesso bisogno di fare diversi tentativi prima di trovare la combinazione perfetta tra mappa di utenti, mappa di file e altri parametri di conversione. Convertire un repository Subversion attraverso un protocollo di accesso come <literal>ssh</literal> o <literal>http</literal> può procedere migliaia di volte più lentamente di quanto Mercurial sia in grado di operare effettivamente, a causa della latenza di rete. Questo può rendere molto dolorosa la regolazione di quella ricetta per la conversione perfetta.</para>

      <para id="x_70c">Il comando <ulink url="http://svn.collab.net/repos/svn/trunk/notes/svnsync.txt"><command>svnsync</command></ulink> può velocizzare grandemente la conversione di un repository Subversion. Serve per creare un mirror di sola lettura di un repository Subversion. L'idea è quella di creare un mirror locale del vostro albero Subversion, poi di convertire il mirror in un repository Mercurial.</para>

      <para id="x_70d">Immaginiamo di voler convertire il repository Subversion che contiene il popolare progetto Memcached in un albero Mercurial. Per prima cosa, creiamo un repository Subversion locale.</para>

      <screen><prompt>$</prompt> <userinput>svnadmin create memcached-mirror</userinput></screen>

      <para id="x_70e">Successivamente, impostiamo un ~hook~ Subversion di cui <command>svnsync</command> ha bisogno.</para>

      <screen><prompt>$</prompt> <userinput>echo '#!/bin/sh' > memcached-mirror/hooks/pre-revprop-change</userinput>
<prompt>$</prompt> <userinput>chmod +x memcached-mirror/hooks/pre-revprop-change</userinput></screen>

      <para id="x_70f">Poi inizializziamo <command>svnsync</command> in questo repository.</para>

      <screen><prompt>$</prompt> <userinput>svnsync --init file://`pwd`/memcached-mirror \
  http://code.sixapart.com/svn/memcached</userinput></screen>

      <para id="x_710">Il passo successivo consiste nel cominciare il processo di creazione del mirror con il comando <command>svnsync</command>.</para>

      <screen><prompt>$</prompt> <userinput>svnsync sync file://`pwd`/memcached-mirror</userinput></screen>

      <para id="x_711">Infine, importiamo la cronologia del nostro mirror locale del repository Subversion in un repository Mercurial.</para>

      <screen><prompt>$</prompt> <userinput>hg convert memcached-mirror</userinput></screen>
      
      <para id="x_712">Possiamo usare questo processo in maniera incrementale se il repository Subversion è ancora attivo. Eseguiamo <command>svnsync</command> per propagare i nuovi cambiamenti verso il nostro mirror e poi eseguiamo <command>hg convert</command> per importarli nel nostro albero Mercurial.</para>

      <para id="x_713">Ci sono due vantaggi nel fare una importazione in due stadi con <command>svnsync</command>. Il primo è che usa una sincronizzazione di rete con Subversion più efficiente rispetto al comando <command>hg convert</command>, quindi trasferisce meno dati attraverso la rete. Il secondo è che l'importazione da un albero Subversion locale è così veloce che potete aggiustare ripetutamente le vostre impostazioni di conversione senza aspettare che un processo di conversione basato sulla rete e dolorosamente lento si concluda ogni volta.</para>
    </sect2>
  </sect1>

  <sect1>
    <title>Migrare da Subversion</title>

    <para id="x_6f8">Attualmente Subversion è il sistema di controllo di revisione open source più popolare. Sebbene ci siano molte differenze tra Mercurial e Subversion, effettuare una transizione da Subversion a Mercurial non è particolarmente difficile. I due hanno insiemi di comandi simili e interfacce generalmente uniformi.</para>

    <sect2>
      <title>Differenze filosofiche</title>

      <para id="x_6f9">Naturalmente, la differenza fondamentale tra Subversion e Mercurial è che Subversion è centralizzato mentre Mercurial è distribuito. Dato che Mercurial memorizza tutta la cronologia di un progetto sul vostro disco locale, ha bisogno di accedere alla rete solo quando volete esplicitamente comunicare con un altro repository. Al contrario, Subversion memorizza localmente un'esigua quantità di informazioni, perciò il client deve contattare il proprio server per molte operazioni comuni.</para>

      <para id="x_6fa">Subversion riesce più o meno a cavarsela senza una nozione di ramo ben definita: quale porzione di uno spazio di nomi sul server si qualifica come ramo è un problema di convenzioni, e il software non fornisce alcuna imposizione. Mercurial tratta un repository come l'unità della gestione dei rami.</para>

      <sect3>
	<title>L'ambito dei comandi</title>

	<para id="x_6fb">Dato che Subversion non sa quali parti del suo spazio di nomi siano realmente rami, tratta la maggior parte dei comandi come se richiedesse di operare al livello di qualsiasi directory stiate correntemente visitando e ai livelli sottostanti. Per esempio, se eseguite <command>svn log</command>, otterrete la cronologia di qualunque parte dell'albero stiate osservando, non dell'intero albero.</para>

	<para id="x_6fc">I comandi Mercurial si comportano in maniera differente, perché di default operano sull'intero repository. Eseguite <command>hg log</command> e vi mostrerà la cronologia dell'intero albero, a prescindere da quale parte della directory di lavoro stiate visitando in quel momento. Se volete solo la cronologia di un file o una directory particolare, vi basta fornire un nome al comando, e.g. <command>hg log src</command>.</para>

	<para id="x_6fd">Per la mia esperienza, questa differenza nel comportamento predefinito dei comandi è probabilmente la cosa che potrà confondervi di più se dovete spostarvi frequentemente avanti e indietro tra i due strumenti.</para>
      </sect3>

      <sect3>
	<title>Operazioni multi-utente e sicurezza</title>

	<para id="x_6fe">Con Subversion, è normale (anche se leggermente disapprovato) collaborare tra più persone in un singolo ramo. Se Alice e Bruno stanno lavorando insieme e Alice inserisce alcune modifiche al loro ramo condiviso, Bruno deve aggiornare la vista del ramo del suo client prima di poter effettuare un commit. Dato che in quel momento non ha alcuna registrazione permanente dei cambiamenti che ha fatto, potrebbe rovinare o perdere le proprie modifiche durante e dopo questo aggiornamento.</para>

	<para id="x_6ff">Mercurial, invece, incoraggia un modello di inserimento-e-unione. Bruno inserisce le proprie modifiche nel suo repository locale prima di estrarre i cambiamenti dal, o trasmetterli al, server che condivide con Alice. Se Alice trasmette i suoi cambiamenti prima che Bruno provi a trasmettere i propri, Bruno non sarà in grado di trasmettere i propri cambiamenti prima di aver estratto quelli di Alice, averli incorporati e aver effettuato il commit dei risultati dell'unione. Se commette un errore durante l'unione, ha ancora l'opzione di ritornare al commit che aveva registrato i suoi cambiamenti.</para>

	<para id="x_700">Vale la pena sottolineare che questi sono i modi più comuni di lavorare con questi strumenti. Subversion supporta un modello più sicuro di lavorare-nel-vostro-ramo-personale, che però in pratica si rivela abbastanza scomodo da non essere largamente usato. Mercurial può supportare il modello meno sicuro di consentire l'estrazione e l'unione di cambiamenti su modifiche non ancora registrate, ma questo è considerato estremamente inusuale.</para>
      </sect3>

      <sect3>
	<title>Cambiamenti locali o pubblici</title>

	<para id="x_701">Il comando <command>svn commit</command> pubblica immediatamente i cambiamenti su un server dove possono essere visti da chiunque abbia accesso in lettura.</para>

	<para id="x_702">Con Mercurial, i commit sono sempre locali e devono essere pubblicati successivamente tramite il comando <command>hg push</command>.</para>

	<para id="x_703">Ogni approccio ha i propri vantaggi e svantaggi. Il modello di Subversion significa che i cambiamenti sono pubblicati, e quindi revisionabili e utilizzabili, immediatamente. D'altra parte, questo significa che un utente deve avere accesso in scrittura a un repository per utilizzare lo strumento in maniera normale, ma la maggior parte dei progetti open source non concede alla leggera i permessi di scrittura.</para>

	<para id="x_704">L'approccio di Mercurial consente a chiunque possa clonare un repository di inserirvi modifiche senza il bisogno del permesso di qualcun altro, e chiunque può pubblicare i propri cambiamenti e continuare a partecipare nel modo che preferisce. La distinzione tra le operazioni di inserimento e trasmissione dei cambiamenti apre la possibilità che qualcuno effettui il commit di alcune modifiche sul proprio computer e si allontani per qualche giorno dimenticandosi di trasmetterli, che in rari casi potrebbe lasciare i collaboratori temporaneamente bloccati.</para>
      </sect3>
    </sect2>

    <sect2>
      <title>~Quick reference~</title>

      <table>
	<title>Equivalenze tra i comandi Subversion e Mercurial</title>
	<tgroup cols="3">
	  <thead>
	    <row>
	      <entry>Subversion</entry>
	      <entry>Mercurial</entry>
	      <entry>Notes</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><command>svn add</command></entry>
	      <entry><command>hg add</command></entry>
	      <entry></entry>
	    </row>
	    <row>
	      <entry><command>svn blame</command></entry>
	      <entry><command>hg annotate</command></entry>
	      <entry></entry>
	    </row>
	    <row>
	      <entry><command>svn cat</command></entry>
	      <entry><command>hg cat</command></entry>
	      <entry></entry>
	    </row>
	    <row>
	      <entry><command>svn checkout</command></entry>
	      <entry><command>hg clone</command></entry>
	      <entry></entry>
	    </row>
	    <row>
	      <entry><command>svn cleanup</command></entry>
	      <entry>n/a</entry>
	      <entry>Nessuna pulizia necessaria</entry>
	    </row>
	    <row>
	      <entry><command>svn commit</command></entry>
	      <entry><command>hg commit</command>; <command>hg
		  push</command></entry>
	      <entry><command>hg push</command> pubblica le modifiche dopo il commit</entry>
	    </row>
	    <row>
	      <entry><command>svn copy</command></entry>
	      <entry><command>hg clone</command></entry>
	      <entry>Per creare un nuovo ramo</entry>
	    </row>
	    <row>
	      <entry><command>svn copy</command></entry>
	      <entry><command>hg copy</command></entry>
	      <entry>Per copiare file o directory</entry>
	    </row>
	    <row>
	      <entry><command>svn delete</command> (<command>svn
		  remove</command>)</entry>
	      <entry><command>hg remove</command></entry>
	      <entry></entry>
	    </row>
	    <row>
	      <entry><command>svn diff</command></entry>
	      <entry><command>hg diff</command></entry>
	      <entry></entry>
	    </row>
	    <row>
	      <entry><command>svn export</command></entry>
	      <entry><command>hg archive</command></entry>
	      <entry></entry>
	    </row>
	    <row>
	      <entry><command>svn help</command></entry>
	      <entry><command>hg help</command></entry>
	      <entry></entry>
	    </row>
	    <row>
	      <entry><command>svn import</command></entry>
	      <entry><command>hg addremove</command>; <command>hg
		  commit</command></entry>
	      <entry></entry>
	    </row>
	    <row>
	      <entry><command>svn info</command></entry>
	      <entry><command>hg parents</command></entry>
	      <entry>Mostra quale revisione è stata estratta</entry>
	    </row>
	    <row>
	      <entry><command>svn info</command></entry>
	      <entry><command>hg showconfig
		  paths.parent</command></entry>
	      <entry>Mostra quale URL è stato estratto</entry>
	    </row>
	    <row>
	      <entry><command>svn list</command></entry>
	      <entry><command>hg manifest</command></entry>
	      <entry></entry>
	    </row>
	    <row>
	      <entry><command>svn log</command></entry>
	      <entry><command>hg log</command></entry>
	      <entry></entry>
	    </row>
	    <row>
	      <entry><command>svn merge</command></entry>
	      <entry><command>hg merge</command></entry>
	      <entry></entry>
	    </row>
	    <row>
	      <entry><command>svn mkdir</command></entry>
	      <entry>n/a</entry>
	      <entry>Mercurial non tiene traccia delle directory</entry>
	    </row>
	    <row>
	      <entry><command>svn move</command> (<command>svn
		  rename</command>)</entry>
	      <entry><command>hg rename</command></entry>
	      <entry></entry>
	    </row>
	    <row>
	      <entry><command>svn resolved</command></entry>
	      <entry><command>hg resolve -m</command></entry>
	      <entry></entry>
	    </row>
	    <row>
	      <entry><command>svn revert</command></entry>
	      <entry><command>hg revert</command></entry>
	      <entry></entry>
	    </row>
	    <row>
	      <entry><command>svn status</command></entry>
	      <entry><command>hg status</command></entry>
	      <entry></entry>
	    </row>
	    <row>
	      <entry><command>svn update</command></entry>
	      <entry><command>hg pull -u</command></entry>
	      <entry></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>
  </sect1>

  <sect1>
    <title>Suggerimenti utili per i principianti</title>

    <para id="x_705">In alcuni sistemi di controllo di revisione, stampare le differenze per una singola revisione inserita può essere doloroso. Per esempio, con Subversion, per vedere cosa è cambiato nella revisione 104654 dovete digitare <command>svn diff -r104653:104654</command>. Mercurial elimina la necessità di digitare due volte l'identificatore di revisione in questo caso comune. Per ottenere solo le differenze, digitate <command>hg export 104654</command>. Per un ottenere messaggio nel registro della cronologia seguito dalle differenze, digitate <command>hg log -r104654 -p</command>.</para>

    <para id="x_706">Quando eseguite <command>hg status</command> senza argomenti, vi viene mostrato lo stato dell'intero albero, con i percorsi relativi alla radice del repository. Questo rende complicato copiare un nome di file dal risultato di <command>hg status</command> alla riga di comando. Se eseguite <command>hg command</command> passandogli il nome di un file o di una directory, il comando stamperà i percorsi relativi alla vostra posizione corrente. Quindi, per ottenere da <command>hg status</command> lo stato di tutto l'albero, con i percorsi relativi alla vostra directory corrente invece che alla radice del repository, passate il risultato di <command>hg root</command> al comando <command>hg status</command>. Su un sistema di tipo Unix, potete farlo facilmente nel modo che segue:</para>

    <screen><prompt>$</prompt> <userinput>hg status `hg root`</userinput></screen>
  </sect1>
</appendix>
