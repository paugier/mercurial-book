#!/usr/bin/env python
# coding: utf-8

import glob
import subprocess
import re
import sys

target_index = 0

def writefile(filename_part, text):
    global target_index
    target_index += 1
    with open("en/%s-%d.xml" % (filename_part, target_index), 'w') as f:
        f.write(text)

for filename in (glob.glob('en/ch*.xml') + glob.glob('en/app*.xml')):
    target_index = 0
    m = re.search('en/ch\d+-(.*).xml', filename)
    if m:
        filename_part = m.group(1)
    if not m:
        m = re.search('en/app[A-Z]-(.*).xml', filename)
        if not m:
            continue
        else:
            filename_part = 'app-' + m.group(1)

    #Replace references
    with open(filename, 'r') as f:
        text = f.read()
        matches = re.finditer('<xref\s*linkend="(.*?)"/>', text, re.MULTILINE)
        for m in matches:
            text = text.replace(m.group(0), "FOOBAR" + m.group(1) + '_')
    writefile(filename_part, text)

    #Replace reference targets
    matches = re.finditer('<(.*?)id="(.*?)"(.*?)>', text)
    for m in matches:
        if any([m.group(2).startswith(x) for x in ['sec:', 'chap:']]):
            text = text.replace(m.group(0), '.. _%s:\n\n<%s%s>\n' % (m.group(2), m.group(1), m.group(3)))
    writefile(filename_part, text)

    #Replace examples
    matches = re.finditer('\s*&interaction.(.*?);', text)
    for m in matches:
        text = text.replace(m.group(0), ".. include:: examples/results/%s.lxo" % m.group(1))
    writefile(filename_part, text)

    matches = re.finditer('&(ch.*?);', text)
    for m in matches:
        text = text.replace(m.group(0), ".. include:: examples/results/%s.lxo" % m.group(1))
    writefile(filename_part, text)

    #Replace images -- Zalgo is coming for me after this
    matches = re.finditer('<figure id="(.*?)">(.*?)</figure>', text, re.MULTILINE | re.DOTALL)
    for m in matches:
        ref = m.group(1)
        figure_contents = m.group(2)
        title = ""
        title_m = re.search('<title>(.*?)</title>', figure_contents, re.MULTILINE | re.DOTALL)
        if title_m:
            title = re.sub('<.*?>', '', title_m.group(1), 0, re.MULTILINE | re.DOTALL).replace('\n', '')
        fileref_m = re.search('fileref="(.*?)"', figure_contents)
        fileref = fileref_m.group(1)

        replacement = "\n.. _{ref}:\n.. image:: {fileref}\n   :alt: {title}\n".format(ref=ref, fileref=fileref, title=title)
        text = text.replace(m.group(0), replacement)
    writefile(filename_part, text)

    #Replace shell scripting in document itself (this is separate for each case, eww)
    replacements = [
        ('<screen><prompt>C:\\></prompt> <userinput>echo %UserProfile%</userinput></screen>',
         '\n.. code::\n\n  C:\\> echo %UserProfile%')
    ]
    for (from_repl, to_repl) in replacements:
        text = text.replace(from_repl, to_repl)

    writefile(filename_part, text)

    #Call pandoc
    subprocess.call("pandoc -f docbook --columns 150 -t rst -s en/%s-%d.xml -o en/%s.rst" % (filename_part, target_index, filename_part), shell=True)

    #Some of the earlier converted RST parts aren't very clean, fix those up
    with open('en/%s.rst' % filename_part, 'r') as f:
        text = f.read()

    #Replace target of a reference (get rid of the backslash)
    matches = re.finditer('\.\. \\\\(.*)', text)
    for m in matches:
        text = text.replace(m.group(0), '.. %s\n\n' % m.group(1))

    #Replace reference (get rid of the backslash)
    matches = re.finditer('([^\s]*):([^\s]*):([^\s]*)\\\\_', text)
    for m in matches:
        text = text.replace(m.group(0), '%s:%s:%s_' % (m.group(1), m.group(2), m.group(3)))

    #Remove newlines from Mercurial commands
    matches = re.finditer('``(.*?)``' , text, re.MULTILINE | re.DOTALL)
    for m in matches:
        res = re.sub('\s+', ' ', "``%s``" % m.group(1).strip())
        text = text.replace(m.group(0), res)

    #Fix images after pandoc screw-up
    matches = re.finditer('.. _(.*?): .. image:: (.*?) :alt: ([^\n]*)', text)
    for m in matches:
        ref = m.group(1)
        imageref = m.group(2)
        alt = m.group(3)
        text = text.replace(m.group(0), '.. _%s:\n.. figure:: %s\n\n   %s\n' % (ref, imageref, alt))

    #Fix code example
    matches = re.finditer('\s*.. code:: (.*)', text)
    for m in matches:
        text = text.replace(m.group(0), '\n\n.. code::\n\n  %s' % m.group(1))

    matches = re.finditer('.. include:: .*?.lxo ', text)
    for m in matches:
        text = text.replace(m.group(0), m.group(0).strip() + '\n\n')

    matches = re.finditer('.. include:: .*?lxo', text)
    for m in matches:
        text = text.replace(m.group(0), m.group(0) + '\n\n')

    #Avoid the next part being interpreted as part of the include
    matches = re.finditer('.. include:: ([^\s]*)(\s*)\*\*(\w+)\*\*', text)
    for m in matches:
        text = text.replace(m.group(0), ".. include:: %s\n\n|%s**%s**" % (m.group(1), m.group(2), m.group(3)))

    matches = re.finditer('.. _fig:undo:bad-merge-(\d+):\n.. figure:: figs/bad-merge-(\d+).png', text)
    for m in matches:
        num = m.group(1)
        text = text.replace(m.group(0), '.. _fig:undo:bad-merge-%s:\n   .. figure:: figs/bad-merge-%s.png' % (num, num))

    #Get rid of 'EMDASH' weird conversion
    text = text.replace('EMDASH', 'â€”')

    text = text.replace('examples/results/ch09-check\\_whitespace.py.lst.lxo',
        'examples/results/ch09-check_whitespace.py.lst.lxo')

    #Fix references for sphinx (thanks to our 'FOOBAR' hint to detect them)
    matches = re.finditer('FOOBAR([^\s]*)_', text)
    for m in matches:
        text = text.replace(m.group(0), ':ref:`%s <%s>`' % (m.group(1), m.group(1)))

    #Only keep the chapters as top-level RST sections
    newtext = []
    first = True
    for line in text.splitlines():
        if '===' in line:
            if first:
                first = False
            else:
                line = '~' * len(line)
        newtext.append(line)
    text = '\n'.join(newtext)

    with open('en/%s.rst' % filename_part, 'w') as f:
        f.write(text)
