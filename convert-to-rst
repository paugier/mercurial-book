#!/usr/bin/env python
# coding: utf-8

import glob
import subprocess
import re
import sys
import shutil

target_index = 0

def writefile(filename_part, text):
    global target_index
    target_index += 1
    with open("en/%s-%d.xml" % (filename_part, target_index), 'w') as f:
        f.write(text)

for filename in (glob.glob('en/ch*.xml') + glob.glob('en/app*.xml')):
    target_index = 0
    m = re.search('en/ch\d+-(.*).xml', filename)
    if m:
        filename_part = m.group(1)
    if not m:
        m = re.search('en/app[A-Z]-(.*).xml', filename)
        if not m:
            continue
        else:
            filename_part = 'app-' + m.group(1)

    #Replace references
    with open(filename, 'r') as f:
        text = f.read()
        matches = re.finditer('<xref\s*linkend="(.*?)"/>', text, re.MULTILINE)
        for m in matches:
            text = text.replace(m.group(0), "FOOBAR" + m.group(1) + '_')
    writefile(filename_part, text)

    #Replace reference targets
    matches = re.finditer('<(.*?)id="(.*?)"(.*?)>', text)
    for m in matches:
        if any([m.group(2).startswith(x) for x in ['sec:', 'chap:', 'svn.filemap', 'mq-collab']]):
            text = text.replace(m.group(0), '.. _%s:\n\n<%s%s>\n' % (m.group(2), m.group(1), m.group(3)))
    writefile(filename_part, text)

    #Replace examples
    matches = re.finditer('\s*&interaction.(.*?);', text)
    for m in matches:
        text = text.replace(m.group(0), ".. include:: examples/results/%s.lxo" % m.group(1))
    writefile(filename_part, text)

    matches = re.finditer('&(ch.*?);', text)
    for m in matches:
        text = text.replace(m.group(0), ".. include:: examples/results/%s.lxo" % m.group(1))
    writefile(filename_part, text)

    #Replace images -- Zalgo is coming for me after this
    matches = re.finditer('<figure id="(.*?)">(.*?)</figure>', text, re.MULTILINE | re.DOTALL)
    for m in matches:
        ref = m.group(1)
        figure_contents = m.group(2)
        title = ""
        title_m = re.search('<title>(.*?)</title>', figure_contents, re.MULTILINE | re.DOTALL)
        if title_m:
            title = re.sub('<.*?>', '', title_m.group(1), 0, re.MULTILINE | re.DOTALL).replace('\n', '')
        fileref_m = re.search('fileref="(.*?)"', figure_contents)
        fileref = fileref_m.group(1)

        replacement = "\n.. _{ref}:\n.. image:: {fileref}\n   :alt: {title}\n".format(ref=ref, fileref=fileref, title=title)
        text = text.replace(m.group(0), replacement)
    writefile(filename_part, text)

    #Replace shell scripting in document itself (this is separate for each case, eww)
    replacements = [
        ('<screen><prompt>C:\\></prompt> <userinput>echo %UserProfile%</userinput></screen>',
         '\n.. code::\n\n  C:\\> echo %UserProfile%'),
        ('<screen><prompt>$</prompt> <userinput>hg convert http://python-nose.googlecode.com/svn/trunk</userinput></screen>',
        '\n.. code::\n\n  $ hg convert http://python-nose.googlecode.com/svn/trunk'),
        ('<screen><prompt>$</prompt> <userinput>svnadmin create memcached-mirror</userinput></screen>',
         '\n.. code::\n\n  $ svnadmin create memcached-mirror'),
        ("<screen><prompt>$</prompt> <userinput>echo '#!/bin/sh' > memcached-mirror/hooks/pre-revprop-change</userinput>\n<prompt>$</prompt> <userinput>chmod +x memcached-mirror/hooks/pre-revprop-change</userinput></screen>",
         "\n.. code::\n\n  $ echo '#!/bin/sh' > memcached-mirror/hooks/pre-revprop-change\n  $ chmod +x memcached-mirror/hooks/pre-revprop-change"),
        ("<screen><prompt>$</prompt> <userinput>svnsync --init file://`pwd`/memcached-mirror \\\n  http://code.sixapart.com/svn/memcached</userinput></screen>",
         "\n.. code::\n\n  $ svnsync --init file://`pwd`/memcached-mirror http://code.sixapart.com/svn/memcached"),
        ("<screen><prompt>$</prompt> <userinput>svnsync sync file://`pwd`/memcached-mirror</userinput></screen>",
         "\n.. code::\n\n  $ svnsync sync file://`pwd`/memcached-mirror"),
        ("<screen><prompt>$</prompt> <userinput>hg convert memcached-mirror</userinput></screen>",
         "\n.. code::\n\n  $ hg convert memcached-mirror"),
        ("<screen><prompt>$</prompt> <userinput>hg status `hg root`</userinput></screen>",
         "\n.. code::\n\n  $ hg status `hg root`")
    ]
    for (from_repl, to_repl) in replacements:
        text = text.replace(from_repl, to_repl)

    writefile(filename_part, text)

    #Call pandoc
    subprocess.call("pandoc -f docbook --columns 150 -t rst -s en/%s-%d.xml -o en/%s.rst" % (filename_part, target_index, filename_part), shell=True)

    #shutil.copyfile('en/%s.rst' % filename_part, 'en/%s-old.rst' % filename_part)

    #Some of the earlier converted RST parts aren't very clean, fix those up
    with open('en/%s.rst' % filename_part, 'r') as f:
        text = f.read()

    #Replace target of a reference (get rid of the backslash)
    matches = re.finditer('\.\. \\\\(.*)', text)
    for m in matches:
        text = text.replace(m.group(0), '.. %s\n\n' % m.group(1))

    #Replace reference (get rid of the backslash)
    matches = re.finditer('([^\s]*):([^\s]*):([^\s]*)\\\\_', text)
    for m in matches:
        text = text.replace(m.group(0), '%s:%s:%s_' % (m.group(1), m.group(2), m.group(3)))

    #Remove newlines from Mercurial commands
    matches = re.finditer('``(.*?)``' , text, re.MULTILINE | re.DOTALL)
    for m in matches:
        res = re.sub('\s+', ' ', "``%s``" % m.group(1).strip())
        text = text.replace(m.group(0), res)

    #Fix images after pandoc screw-up
    matches = re.finditer('.. _(.*?): .. image:: (.*?) :alt: ([^\n]*)', text)
    for m in matches:
        ref = m.group(1)
        imageref = m.group(2)
        alt = m.group(3)
        text = text.replace(m.group(0), '.. _%s:\n.. figure:: %s\n\n   %s\n' % (ref, imageref, alt))

    #Fix code example
    matches = re.finditer('\s*.. code:: (.*)', text)
    for m in matches:
        text = text.replace(m.group(0), '\n\n.. code::\n\n  %s' % m.group(1))

    matches = re.finditer('.. include:: .*?.lxo ', text)
    for m in matches:
        text = text.replace(m.group(0), m.group(0).strip() + '\n\n')

    matches = re.finditer('.. include:: .*?lxo', text)
    for m in matches:
        text = text.replace(m.group(0), m.group(0) + '\n\n')

    #Avoid the next part being interpreted as part of the include
    matches = re.finditer('.. include:: ([^\s]*)(\s*)\*\*(\w+)\*\*', text)
    for m in matches:
        text = text.replace(m.group(0), ".. include:: %s\n\n|%s**%s**" % (m.group(1), m.group(2), m.group(3)))

    matches = re.finditer('.. _fig:undo:bad-merge-(\d+):\n.. figure:: figs/bad-merge-(\d+).png', text)
    for m in matches:
        num = m.group(1)
        text = text.replace(m.group(0), '.. _fig:undo:bad-merge-%s:\n   .. figure:: figs/bad-merge-%s.png' % (num, num))

    #Get rid of 'EMDASH' weird conversion
    text = text.replace('EMDASH', 'â€”')

    text = text.replace('examples/results/ch09-check\\_whitespace.py.lst.lxo',
        'examples/results/ch09-check_whitespace.py.lst.lxo')

    #Fix references for sphinx (thanks to our 'FOOBAR' hint to detect them)
    matches = re.finditer('FOOBAR([^\s]*)_', text)
    for m in matches:
        text = text.replace(m.group(0), ':ref:`%s <%s>`' % (m.group(1), m.group(1)))

    text = text.replace("Informal sharing with ``hg serve``\n", "Informal sharing with ``hg serve``\n========")
    text = text.replace("Options specific to the ``hg serve`` command\n", "Options specific to the ``hg serve`` command\n~~~~~~~~~~~~~~~~")

    print filename
    if filename == "en/appA-svn.xml":
        text = text.replace("hg convert http://python-nose.googlecode.com/svn/trunk", "hg convert http://python-nose.googlecode.com/svn/trunk\n\n")
        text = text.replace("svnadmin create memcached-mirror", "svnadmin create memcached-mirror\n\n")
        text = text.replace(" $ chmod +x memcached-mirror/hooks/pre-revprop-change", "\n  $ chmod +x memcached-mirror/hooks/pre-revprop-change\n\n")
        text = text.replace("svnsync --init file://\`pwd\`/memcached-mirror http://code.sixapart.com/svn/memcached",
            "svnsync --init file://`pwd`/memcached-mirror http://code.sixapart.com/svn/memcached\n\n")
        text = text.replace("$ svnsync sync file://\`pwd\`/memcached-mirror", "$ svnsync sync file://`pwd`/memcached-mirror\n\n")
        text = text.replace("$ hg convert memcached-mirror", "$ hg convert memcached-mirror\n\n")
        text = text.replace("$ hg status \`hg root\`", "$ hg status `hg root`\n\n")

        text = text.replace("| ``svn commit``          | ``hg commit``; ``hg |``hg push``publishes after commit | | | push``           |                                        |",
            "| ``svn commit``          | ``hg commit; hg push``     | ``hg push`` publishes after commit     |")
        text = text.replace("| ``svn delete`` (``svn |``hg remove``| | | remove``)     |                            |                                        |",
            "| ``svn delete``          | ``hg remove``              |                                        |")
        text = text.replace("| ``svn import``          | ``hg addremove``; ``hg | | | | commit``         |                                        |",
            "| ``svn import``          | ``hg addremove``;          |                                        |\n|                         | ``hg commit``              |                                        |")
        text = text.replace("| ``svn info``            | ``hg showconfig | Shows what URL is checked out | | | paths.parent``   |                                        |",
            "| ``svn info``            | ``hg showconfig paths``    | Shows what URL is checked out          |")
        text = text.replace("| ``svn move`` (``svn |``hg rename``| | | rename``)     |                            |                                        |",
            "| ``svn move``            | ``hg move``                |                                        |\n| (``svn rename``)        | (``hg rename``)            |                                        |")
    elif filename == "en/ch00-preface.xml":
        text = text.replace("We have a web page for this book, where we list errata, examples, and any additional information. You can access this page at:",
            "We have a web page for this book, where we list errata, examples, and any additional information. You can access this page at " \
            "http://www.oreilly.com/catalog/errataunconfirmed.csp?isbn=9780596801311.")
        text = text.replace("To comment or ask technical questions about this book, send email to:\n\nbookquestions@oreilly.com",
            "To comment or ask technical questions about this book, send email to bookquestions@oreilly.com.")
        text = text.replace("For more information about our books, conferences, Resource Centers, and the Oâ€™Reilly Network, see our web site at:",
            "For more information about our books, conferences, Resource Centers, and the Oâ€™Reilly Network, see our web site at http://www.oreilly.com.")
        text = text.replace("\nOâ€™Reilly Media, Inc.\n", "\n| Oâ€™Reilly Media, Inc.\n")
        text = text.replace("1005 Gravenstein Highway North", "| 1005 Gravenstein Highway North")
        text = text.replace("Sebastopol, CA 95472", "| Sebastopol, CA 95472")
        text = text.replace("800-998-9938 (in the United States or Canada)", "| 800-998-9938 (in the United States or Canada)")
        text = text.replace("707-829-0515 (international or local)", "| 707-829-0515 (international or local)")
        text = text.replace("707 829-0104 (fax)", "| 707 829-0104 (fax)\n")
    elif filename == "en/ch03-tour-merge.xml":
        text = text.replace("   Divergent recent\n\n\n\nhistories of the my-hello and my-new-hello repositories",
                            "   Divergent recent histories of the my-hello and my-new-hello repositories\n")
    elif filename == "en/ch06-collab.xml":
        text = text.replace("`the ``puttygen``\n   documentation <http://the.earth.li/~sgtatham/putty/0.60/htmldoc/Chapter8.html#pubkey-puttygen>`__",
                            "`the puttygen documentation <http://the.earth.li/~sgtatham/putty/0.60/htmldoc/Chapter8.html#pubkey-puttygen>`_")
        text = text.replace("``pageant`` <http://www.chiark.greenend.org.uk/%7Esgtatham/putty/download.html>",
                            "pageant <http://www.chiark.greenend.org.uk/%7Esgtatham/putty/download.html>")
    elif filename == "en/ch07-filenames.xml":
        text = text.replace(".. include::\nexamples/results/filenames.files.lxo", "\n\n.. include:: examples/results/filenames.files.lxo")
    elif filename == "en/ch09-undo.xml":
        text = text.replace(".. _fig:undo:bad-merge-1:", "   .. _fig:undo:bad-merge-1:")
        text = text.replace(".. include:: examples/results/backout.simple.log.lxo", "\n\n.. include:: examples/results/backout.simple.log.lxo")
    text = text.replace("    **Caution**", ".. Caution::")
    text = text.replace("    **Tip**", ".. Tip::")
    text = text.replace("    **Note**", ".. Note::")

    #Fix up final references
    replacements = [(":ref:`sec:undo:bisect <sec:undo:bisect>`", ":ref:`\"Finding the source of a bug\" <sec:undo:bisect>`"),
        (":ref:`chap:scaling\ <chap:scaling\>`", ":ref:`\"Scaling Mercurial\" <chap:scaling>`"),
        (":ref:`sec:scaling:largefiles <sec:scaling:largefiles>`", ":ref:`\"Mercurial Largefiles\" <sec:scaling:largefiles>`")]
    for (fro, to) in replacements:
        text = text.replace(fro, to)

    #Only keep the chapters as top-level RST sections
    newtext = []
    first = True
    for line in text.splitlines():
        #Make sure it's a line only containing '='
        if '===' in line and not line.replace("=", "").replace("\n", ""):
            if first:
                first = False
            else:
                line = '~' * len(line)
        newtext.append(line)
    text = '\n'.join(newtext)

    with open('en/%s.rst' % filename_part, 'w') as f:
        f.write(text)
